services:

  cheshire-cat-core:
    build:
      context: ./core
      target: build
    container_name: cheshire_cat_core
    # Uncomment the two lines below to use your .env (see .env.example)
    # env_file:
    #  - .env
    ports:
      - ${CCAT_CORE_PORT:-1865}:80
      - "5678:5678" # only for development purposes (take away in production)
      - "8765:8765/udp" # Network discovery multicast port
    extra_hosts:
      - "host.docker.internal:host-gateway" # This adds an entry to /etc/hosts file in the container mapping host.docker.internal to the host machine IP addr, allowing the container to access services running on the host, not only on Win and Mac but also Linux. See https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host and https://docs.docker.com/reference/cli/docker/container/run/#add-host
    environment:
      # Timezone
      - TZ=${CCAT_TIMEZONE:-UTC}
      - PYTHONUNBUFFERED=1
      - CCAT_QDRANT_HOST=cheshire_cat_vector_memory
      - CCAT_QDRANT_PORT=6333
      - CCAT_API_KEY=test
      - CCAT_API_KEY_WS=test
      - CCAT_REDIS_HOST=cheshire_cat_redis
      - CCAT_REDIS_PORT=6379
      # Network discovery configuration
      - CCAT_CORE_HOST=0.0.0.0
      - CCAT_CORE_PORT=80
      - DISCOVERY_PORT=8765
      - MULTICAST_GROUP=255.255.255.255
      - HEARTBEAT_INTERVAL=30
      - NODE_TIMEOUT=90
      - UPDATE_PROPAGATION_TIMEOUT=10
    volumes:
      - ./core:/app
    command:
      - python
      - "-m"
      - "cat.main"
    restart: unless-stopped
    depends_on:
      cheshire-cat-redis:
        condition: service_healthy
      cheshire-cat-healthcheck:
        condition: service_healthy
    networks:
      - cheshire-network

  cheshire-cat-core-2:
    build:
      context: ./core
      target: build
    container_name: cheshire_cat_core_2
    ports:
      - "1866:80"
      - "5679:5678" # only for development purposes (take away in production)
      - "8766:8765/udp" # Network discovery multicast port
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      # Timezone
      - TZ=${CCAT_TIMEZONE:-UTC}
      - PYTHONUNBUFFERED=1
      - CCAT_QDRANT_HOST=cheshire_cat_vector_memory
      - CCAT_QDRANT_PORT=6333
      - CCAT_API_KEY=test
      - CCAT_API_KEY_WS=test
      - CCAT_REDIS_HOST=cheshire_cat_redis
      - CCAT_REDIS_PORT=6379
      # Network discovery configuration
      - CCAT_CORE_HOST=0.0.0.0
      - CCAT_CORE_PORT=80
      - DISCOVERY_PORT=8765
      - MULTICAST_GROUP=255.255.255.255
      - HEARTBEAT_INTERVAL=30
      - NODE_TIMEOUT=90
      - UPDATE_PROPAGATION_TIMEOUT=10
    volumes:
      - ./core:/app
    command:
      - python
      - "-m"
      - "cat.main"
    restart: unless-stopped
    depends_on:
      cheshire-cat-redis:
        condition: service_healthy
      cheshire-cat-healthcheck:
        condition: service_healthy
    networks:
      - cheshire-network

  cheshire-cat-core-3:
    build:
      context: ./core
      target: build
    container_name: cheshire_cat_core_3
    ports:
      - "1867:80"
      - "5680:5678" # only for development purposes (take away in production)
      - "8767:8765/udp" # Network discovery multicast port
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      # Timezone
      - TZ=${CCAT_TIMEZONE:-UTC}
      - PYTHONUNBUFFERED=1
      - CCAT_QDRANT_HOST=cheshire_cat_vector_memory
      - CCAT_QDRANT_PORT=6333
      - CCAT_API_KEY=test
      - CCAT_API_KEY_WS=test
      - CCAT_REDIS_HOST=cheshire_cat_redis
      - CCAT_REDIS_PORT=6379
      # Network discovery configuration
      - CCAT_CORE_HOST=0.0.0.0
      - CCAT_CORE_PORT=80
      - DISCOVERY_PORT=8765
      - MULTICAST_GROUP=255.255.255.255
      - HEARTBEAT_INTERVAL=30
      - NODE_TIMEOUT=90
      - UPDATE_PROPAGATION_TIMEOUT=10
    volumes:
      - ./core:/app
    command:
      - python
      - "-m"
      - "cat.main"
    restart: unless-stopped
    depends_on:
      cheshire-cat-redis:
        condition: service_healthy
      cheshire-cat-healthcheck:
        condition: service_healthy
    networks:
      - cheshire-network

  cheshire-cat-redis:
    image: redis/redis-stack-server:latest
    container_name: cheshire_cat_redis
    command: >
      sh -c 'redis-stack-server --protected-mode no --save 60 1 --dir /data --appendonly yes --appendfsync everysec'
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cheshire-network

  cheshire-cat-vector-memory:
    image: qdrant/qdrant:latest
    container_name: cheshire_cat_vector_memory
    ports:
      - "6333:6333"
    volumes:
      - ./core/cat/data/long_term_memory/vector:/qdrant/storage
    restart: unless-stopped
    networks:
      - cheshire-network

  cheshire-cat-healthcheck:
    image: curlimages/curl:latest
    container_name: cheshire_cat_healthcheck
    entrypoint: [ "/bin/sh", "-c", "--", "while true; do sleep 30; done;" ]
    depends_on:
      - cheshire-cat-vector-memory
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://cheshire-cat-vector-memory:6333/readyz" ]
      interval: 10s
      timeout: 2s
      retries: 5
    restart: always
    networks:
      - cheshire-network

volumes:
  qdrant_data:
  redis-data:

networks:
  cheshire-network:
    driver: bridge
